// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Guide         Guide[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Hero {
    id        String  @id @default(cuid())
    name      String
    image_url String
    Guide     Guide[]
}

enum Role {
    EXP
    JUNGLE
    ROAM
    MID
    GOLD
}

model Guide {
    id         String       @id @default(cuid())
    title      String
    hero       Hero         @relation(fields: [heroId], references: [id])
    heroId     String
    role       Role
    user       User         @relation(fields: [userId], references: [id])
    userId     String
    SpellGuide SpellGuide[]
}

model Spell {
    id          String       @id @default(cuid())
    name        String
    image_url   String
    description String
    SpellGuide  SpellGuide[]
}

model SpellGuide {
    id      String @id @default(cuid())
    title   String
    spell   Spell  @relation(fields: [spellId], references: [id])
    spellId String
    guide   Guide  @relation(fields: [guideId], references: [id])
    guideId String
}
